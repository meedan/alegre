import tempfile
import unittest
import json
from flask import current_app as app
import redis
from sqlalchemy import text
from unittest.mock import patch

from app.main import db
from app.test.base import BaseTestCase
from app.main.lib.shared_models.shared_model import SharedModel
from app.main.lib.shared_models.audio_model import AudioModel
from app.main.model.audio import Audio

class SharedModelStub(SharedModel):
  model_key = 'audio'

  def load(self):
    pass

  def respond(self, task):
    return task

class TestAudioSimilarityBlueprint(BaseTestCase):
    def setUp(self):
        super().setUp()
        first_print = [-124683624, -124650872, -101656952, -97467704, -97467560, -97471960, 2054218284, 2060478253, 2056285955, 2039709442, 2027093298, 2018696482, -129594334, -129595310, -129652541, -113006397, -100488063, -99447423, -32324224, -1105965152, -1089196384, -1110168928, -1261163872, -1265300832, -1533263980, -1598281851, -1581386345, -1581280010, -1547924234, -1552119754, -1558411210, -1556833001, -1556830972, -1592401148, -1609166076, -1609170124, -1609170132, -1598684884, -1531574996, -1263072772, -1263584371, -1262720113, -1258489202, -1791174002, -1791175026, -1791143282, -1757531250, -1771167282, -1771167634, -1234362258, -1234369306, -1229992778, -155342713, -140728179, -409163636, -288584516, -301691651, -301562851, -300764129, -298671074, -298654426, -282925785, -316508889, -378337947, -1462673955, -1466864163, -1466433667, -1382621395, -1382691265, -1375943153, -1115889138, -1119952370, -1136724418, -1405399426, -1407689738, -1403459354, -1392973593, -1396782891, -1376859963, -1368470075, -1104231483, -1372589180, -1372593740, -1502616156, -1493342812, -1514379872, -1533254704, -1533255152, -1259003344, -1267924429, -1272183246, -1272168670, -1272694494, -1285158814, -1297741630, -1765930878, -692185982, -694300478, -694898605, -709582576, -722164940, -734748112, 1412867632, 1345762832, 1345767216, 1362543888, 1395803396, 1396065284, 1396067396, 1400326260, 1404525028, 1368748020, 1419011780, 1418990276, 1419526903, 1419002614, 1440109030, -539561882, -564794266, -564860810, -564664250, 1582753862, 1591667014, 1591729486, 1599883134, 1566053174, 1551442806, 1551508327, 1417294689, 1425740641, 1425544145, 1173885889, 1207633347, 1325010370, 1316882754, 1315850578, 1332574562, 1307372514, 1287188466, 1287174017, 1555595664, 1555861664, 1568448672, 1597808800, 1579065728, 1579070272, 2132181520, 2132059680, 1830071840, 1700571683, -404776670, -421885466, -421869386, -300169082, 1847153798, 1847353478, 1849450919, 1853317543, 1856127461, -290307755, -290238204, -286252796, -26205392, -26205660, -28167644, -19791323, -40562137, -591580650, -591514362, -591782842, -591852426, -856160026, -868714330, -868550522, -600141947, -718369083, -680552764, -697321788, -689458492, -688942395, -688024841, -562240922, -566466970, -566483162, -1774439130, -1774648025, -1770389193, -155569915, -692424443, -725946367, -726999039, -726945725, -592739246, -587480590, -596027422, -600033562, -1673718026, -1675739450, -551601722, -631424778, -625198850, -893829921, -893840161, -893910835, -894897699, -893869572, -902192660, -904228372, -618745604, -618746684, -652301116, -128013116, -119632556, -119765148, -61562267, -65691098, -65617370, -65617370, -63158746, -197298910, -193041390, -453620670, -168407917, 1970691203, -143229565, -227095165, -227095167, -218643040, -218312288, -219389504, -202542144, -252882336, -252942752, -257153439, -168876334, -135436302, -161189790, -161202142, -1234943950, -165261310, -177806330, -186192634, 2091297303, 2091829813, 1823263284, -454238212, -462101268, -315300692, -449482580, -449445748, 1698043021, 1697785253, 1708287717, 1704085092, -172800491, -174008827, -136255993, -161435897, -160252889, -159933401, -153822169, -153750475, -170463231, -186719984, -195148960, -199490848, -736360816, -1809949056, -1268880768, -1260987760, -1265251664, -1248010543, -1210264893, -1224961470, -1224945070, -1225989534, -1234312666, -1238543833, -1104605897, -1104668635, -1100208091, -1074960323, -1079064499, -1112617777, -1112615730, -34283274, -63663642, -130972698, -63778074, -49126666, -49272890, -49270906, -11322974, -2995802, -23966298, -23968314, -155795002, -155848697, -151723995, -143876060, -181558220, -198256364, -198256028, -261104924, -261108012, -261175612, -244366652, -181595452, -198438284, -194763996, -186374873, -190567130, -173786074, -151573498, -160273402, -696794106, -699022314, -699038666, -18893802, -23091961, -35741439, -60907263, -62942975, -63209103, -58998685, -59158494, -1267135198, -1271066782, -1270924590, -1270928702, -1786822958, -1208412266, -1229387899, -1230421628, -1230252668, -1767334492, -1633108252, -1628920220, -1624644996, -1758764499, -1758973394, -1792539858, -1272381330, -1268183826, -1259784018, -1259706178, -1242896244, -1250252404, -142954868, -147090740, -148274612, -1289190852, -1284734420, -1309875666, -1309875930, -1242569434, -1249973194, -1250272138, -1250210570, -1250212650, -1241886650, -168140731, -50633972, -50830820, -59218372, -46568936, -1120241143, -1086695109, -1100429202, -1092072342, -1628945334, -555024310, -553975734, -554098198, -558226514, -558226514, -558234202, -1628961354, -840433278, -865177214, -868289149, -868317757, 1550683488, 1558490464, 1575005536, 1591913792, 1583514944, 2116126192, -30374688, -32463648, -15669775, 2081940839, 2086037282, 1960707619, 1962872371, 1962675793, -731370767, -731107359, -705745504, -676461135, -675921791, -759709565, -755924798, -756960190, -757029550, -739990174, -773479390, -798575581, -194607849, -1267759851, -1267943643, -198384091, -198384095, -198257119, -198785487, -198883807, -197897677, -176917181, -162118591, -162118656, -162178000, -159941616, -164205568, -164168448, -134822640, -155860700, -155930523, -155868985, -155864890, -1212383066, -1220755282, -1087617874, -47563634, -47566914, -47564114, -404153682, -408339762, -408342834, -173463858, -173512994, -202869793, -244816931, -265788963, -265756444, 1882841316, 1882903008, 1884980048, 1884914176, 1893500433, 1893504562, 1935588866, 1916714242, 1916177426, 1647807538, -499663821, -499733481, -482956027, -478769388, -495464859, -428476682, -1502125370, -1506344298, -1556872538, -1558441306, -1587792986, -1583606353, -1531702105, -1532752729, -1247398777, -1247665018, -1745738554, -1758452730, -1758450634, -1754174186, -689771754, -676955594, -1750639066, -1750214890, -1744977658, -2048999353, -1931558715, -1944313708, -868481884, -868481628, -868874588, -856283424, -860413344, -860610048, -841731580, -850274812, -820990172, -822039776, -821843183, -851267837, -846747838, -846883886, -1937403150, -1939897678, -1944156510, -1659140446, -1625561437, -1642371149, -1638193775, -1633746511, -1631780445, -1631768349, -1628692249, -563343273, -546566113, -601326561, -601167841, -596989683, -595871483, -587682044, -587684076, 1551409924, 1551601925, 1567260949, -680885913, -680868638, -684045214, -683968174, -683709118, -683727550, -684379342, -680066250, -575208697, -575731968, -1649453216, -1665335968, -1648824864, -1644646960, -1623607920, -1623546992, -1636126063, -1635871085, -1688234335, -1692600671, -1726191903, -1742985488, -1742985408, -1202248400, -1174990816, -1078656989, -1632174062, -558485502, -554553338, -564707322, -623555498, -640194490, -665425802, -665335706, -602634138, -600537658, -58944569, 2088735429, 2084475588, 2132185813, -32004169, -32004718, -32057934, -29933406, -30146398, -1103351322, -1343479450, -1380097745, -1380169939, -1380163812, -1128469756, -1132664060, -1136854492, -1120023003, -46775771, -46788025, -183102782, -719907886, -715902749, -732683167, -724100016, -724166592, -724166592, -722011840, 1438103360, 1454211904, -760446127, -759397518, -759392414, -761483998, -765679326, -770905758, -234079258, -232904826, -232905849, -226618489, -223411801, -222559833, -224635481, -225643129, -204687409, -1861437745, -1873893689, -1864457529, -1864453533, -1269988574, -1274232538, -1273174762, -1138792170, -1082251226, -1090647706, -1094842026, -1631712570, -1627578682, -1636026674, -1640222002, -1910754434, -832823186, -828628882, -960552721, -943827772, -978429820, -1058289536, -1071019120, -1071019344, -1003898208, -1071075424, -1070881392, -1070685056, -802257728, -802782016, -798712736, -236672736, -1310414048, -1582978560, -1583044048, -1545294303, -1553682909, -1556824286, -1556836570, -1558917338, -1575564698, -1571394970, -1560905106, -1565652242, -1566045482, -1561838202, -1574428538, -1574432634, -500551530, -500293442, -512876353, -257018484, 1890453900, 1890453896, 1353452424, 1089219321, -1066653137, -1066652114, -1058257394, -1062616306, -1062698698, -2136436698, -2119651290, -2086104027, -2098557888, -2039837376, -2042978368, -2026131760, -2025984159, -2026049694, -1791121630, -1787919006, -1787918878, -1251043390, -1251303743, -1117087168, -9926048, -1087854048, -1356075472, -1356116715, -1356331993, -1389886426, -1406663642, -328663002, -324390814, -55958829, -55958847, -54971775, -54758719, -598444479, -552116479, -569189373, 1578302467, 1582525443, 1322724371, 1322728727, -807989930, -984281738, -983757466, -947976730, -939634234, -960601722, 1186943367, 1321161108, 1318875300, 1339827364, 1293700524, -851588692, -851514372, 1278127884, 1546556932, 1546490373, 1546428949, 1550623268, 1550623268, -595811803, -581044633, -539034266, -1629611742, -1761734894, -1761737214, -2031156730, -2031345098, -2019024538, -945291026, -1918368593, -860351316, -856153932, -868683636, -868384564, -853630644, 1293853980, 1528737071, 1532934462, 1507769358, 1507828766, 1499242558, 1530507290, 1530576906, 1497022539, 2031865337, 2065296104, 2061101800, 2057042601, 1519963785, 1524159115, 1578685323, 1578889630, -568659033, -539307099, -593833312, -57089120, -56823936, -58867776, -198849920, -198784384, -182292848, -182288671, -144488479, -136313631, -136302365, -673177513, -680452089, -671997689, -709741786, -1783163098, -1784389850, -1800611529, -1800877771, -1779921571, -2023121459, -2038782515, -2038779444, -2026192100, -2026289627, -2026371545, -2059852249, -2060574170, -982568154]
        audio = Audio(first_print, "blah", "http://blah.com", [{"blah": 1}])
        db.session.add(audio)
        db.session.commit()
        self.model = AudioModel('audio')

    def tearDown(self): # done in our pytest fixture after yield
        db.session.remove()
        db.drop_all()

    def test_basic_http_responses_with_doc_id(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        with patch('app.main.lib.shared_models.shared_model.SharedModel.get_client', ) as mock_get_shared_model_client:
            with patch('app.main.lib.shared_models.shared_model.SharedModel.get_shared_model_response', ) as mock_get_shared_model_response:
                mock_get_shared_model_client.return_value = SharedModelStub('audio')
                mock_get_shared_model_response.return_value = {"url": url, "project_media_id": 123}
                response = self.client.post('/audio/similarity/', data=json.dumps({
                    'url': url,
                    'doc_id': "Y2hlY2stcHJvamVjdF9tZWRpYS01NTQ1NzEtdmlkZW8",
                    'context': {
                        'team_id': 1,
                        'has_custom_id': True
                    }
                }), content_type='application/json')
        result = json.loads(response.data.decode())
        self.assertEqual(result, {"url": url, "project_media_id": 123})
        with patch('app.main.lib.shared_models.shared_model.SharedModel.get_client', ) as mock_get_shared_model_client:
            with patch('app.main.lib.shared_models.shared_model.SharedModel.get_shared_model_response', ) as mock_get_shared_model_response:
                mock_get_shared_model_client.return_value = SharedModelStub('audio')
                mock_get_shared_model_response.return_value = {"result": [{"hash_key": "6393db3d6d5c181aa43dd925539a15e7", "context": {"blah": 1, "project_media_id": "12343"}, "score": "0.033167", "filename": "/app/persistent_disk/6393db3d6d5c181aa43dd925539a15e7/12342.tmk"}, {"hash_key": "6393db3d6d5c181aa43dd925539a15e7", "context": {"blah": 1, "project_media_id": "12343"}, "score": "1.000000", "filename": "/app/persistent_disk/6393db3d6d5c181aa43dd925539a15e7/12343.tmk"}]}
                response = self.client.get('/audio/similarity/', data=json.dumps({
                    'url': url,
                    'doc_id': "Y2hlY2stcHJvamVjdF9tZWRpYS01NTQ1NzEtdmlkZW8",
                    'context': {
                        'team_id': 1,
                        'has_custom_id': True
                    }
                }), content_type='application/json')
        result = json.loads(response.data.decode())
        self.assertEqual(result, {'result': [{'hash_key': '6393db3d6d5c181aa43dd925539a15e7', 'context': {'blah': 1, 'project_media_id': '12343'}, 'score': '0.033167', 'filename': '/app/persistent_disk/6393db3d6d5c181aa43dd925539a15e7/12342.tmk'}, {'hash_key': '6393db3d6d5c181aa43dd925539a15e7', 'context': {'blah': 1, 'project_media_id': '12343'}, 'score': '1.000000', 'filename': '/app/persistent_disk/6393db3d6d5c181aa43dd925539a15e7/12343.tmk'}]})

    def test_basic_http_responses(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        with patch('app.main.lib.shared_models.shared_model.SharedModel.get_client', ) as mock_get_shared_model_client:
            with patch('app.main.lib.shared_models.shared_model.SharedModel.get_shared_model_response', ) as mock_get_shared_model_response:
                mock_get_shared_model_client.return_value = SharedModelStub('audio')
                mock_get_shared_model_response.return_value = {"url": url, "project_media_id": 123}
                response = self.client.post('/audio/similarity/', data=json.dumps({
                    'url': url,
                    'project_media_id': 1,
                    'context': {
                        'team_id': 1,
                    }
                }), content_type='application/json')
        result = json.loads(response.data.decode())
        self.assertEqual(result, {"url": url, "project_media_id": 123})
        with patch('app.main.lib.shared_models.shared_model.SharedModel.get_client', ) as mock_get_shared_model_client:
            with patch('app.main.lib.shared_models.shared_model.SharedModel.get_shared_model_response', ) as mock_get_shared_model_response:
                mock_get_shared_model_client.return_value = SharedModelStub('audio')
                mock_get_shared_model_response.return_value = {"result": [{"hash_key": "6393db3d6d5c181aa43dd925539a15e7", "context": {"blah": 1, "project_media_id": "12343"}, "score": "0.033167", "filename": "/app/persistent_disk/6393db3d6d5c181aa43dd925539a15e7/12342.tmk"}, {"hash_key": "6393db3d6d5c181aa43dd925539a15e7", "context": {"blah": 1, "project_media_id": "12343"}, "score": "1.000000", "filename": "/app/persistent_disk/6393db3d6d5c181aa43dd925539a15e7/12343.tmk"}]}
                response = self.client.get('/audio/similarity/', data=json.dumps({
                    'url': url,
                    'project_media_id': 1,
                    'context': {
                        'team_id': 1,
                    }
                }), content_type='application/json')
        result = json.loads(response.data.decode())
        self.assertEqual(result, {'result': [{'hash_key': '6393db3d6d5c181aa43dd925539a15e7', 'context': {'blah': 1, 'project_media_id': '12343'}, 'score': '0.033167', 'filename': '/app/persistent_disk/6393db3d6d5c181aa43dd925539a15e7/12342.tmk'}, {'hash_key': '6393db3d6d5c181aa43dd925539a15e7', 'context': {'blah': 1, 'project_media_id': '12343'}, 'score': '1.000000', 'filename': '/app/persistent_disk/6393db3d6d5c181aa43dd925539a15e7/12343.tmk'}]})

    def test_get_tempfile(self):
        self.assertIsInstance(self.model.get_tempfile(), tempfile._TemporaryFileWrapper)

    def test_execute_command(self):
        self.assertIsInstance(self.model.execute_command("ls"), str)

    def test_load(self):
        self.model.load()
        self.assertIsInstance(self.model.directory, str)
        self.assertIsInstance(self.model.ffmpeg_dir, str)

    def test_delete_by_doc_id(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        self.model.load()
        self.model.add({"url": url, 'doc_id': "Y2hlY2stcHJvamVjdF9tZWRpYS01NTQ1NzEtdmlkZW8", "context": {"has_custom_id": True}})
        result = self.model.delete({"url": url, "project_media_id": 1})
        self.assertIsInstance(result, dict)
        self.assertEqual(sorted(result.keys()), ['requested', 'result'])
        self.assertEqual(sorted(result['requested'].keys()), ['project_media_id', 'url'])
        self.assertEqual(sorted(result['result'].keys()), ['deleted', 'url'])

    def test_add_by_doc_id(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        self.model.load()
        result = self.model.add({"url": url, 'doc_id': "Y2hlY2stcHJvamVjdF9tZWRpYS01NTQ1NzEtdmlkZW8", "context": {"has_custom_id": True}})
        self.assertIsInstance(result, dict)
        self.assertEqual(sorted(result.keys()), ['requested', 'result', 'success'])
        self.assertEqual(sorted(result['requested'].keys()), ['context', 'doc_id', 'url'])
        self.assertEqual(sorted(result['result'].keys()), ['url'])

    def test_search_by_doc_id(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        self.model.load()
        hash_key = "blah"
        with patch('app.main.lib.shared_models.audio_model.AudioModel.search_by_context', ) as mock_search_by_context:
            mock_search_by_context.return_value = [{"folder": "blah", "filepath": "12342", "context": [{'blah': 1, 'project_media_id': 12342}]}, {"folder": "blah", "filepath": "12343", "context": [{'blah': 1, 'project_media_id': 12343}]}]
            self.model.add({"url": url, 'doc_id': "Y2hlY2stcHJvamVjdF9tZWRpYS01NTQ1NzEtdmlkZW8", "context": {"blah": 1, "has_custom_id": True, 'project_media_id': 12343}})
            result = self.model.search({"url": url, 'doc_id': "Y2hlY2stcHJvamVjdF9tZWRpYS01NTQ1NzEtdmlkZW8", "context": {"blah": 1, "has_custom_id": True, 'project_media_id': 12343}})
        self.assertIsInstance(result, dict)
        self.assertEqual(sorted(result["result"][0].keys()), ['chromaprint_fingerprint', 'context', 'doc_id', 'id', 'score', 'url'])
        self.assertEqual(result["result"][0]['doc_id'], 'Y2hlY2stcHJvamVjdF9tZWRpYS01NTQ1NzEtdmlkZW8')
        self.assertEqual(result["result"][0]['url'], 'file:///app/app/test/data/eddy_wally_wow.mp3')
        self.assertEqual(result["result"][0]['context'], [{'blah': 1, 'has_custom_id': True, 'project_media_id': 12343}])

    def test_delete(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        self.model.load()
        self.model.add({"url": url, "project_media_id": 1})
        result = self.model.delete({"url": url, "project_media_id": 1})
        self.assertIsInstance(result, dict)
        self.assertEqual(sorted(result.keys()), ['requested', 'result'])
        self.assertEqual(sorted(result['requested'].keys()), ['project_media_id', 'url'])
        self.assertEqual(sorted(result['result'].keys()), ['deleted', 'url'])

    def test_add(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        self.model.load()
        result = self.model.add({"url": url, "project_media_id": 1})
        self.assertIsInstance(result, dict)
        self.assertEqual(sorted(result.keys()), ['requested', 'result', 'success'])
        self.assertEqual(sorted(result['requested'].keys()), ['project_media_id', 'url'])
        self.assertEqual(sorted(result['result'].keys()), ['url'])

    def test_add_wav(self):
        url = 'file:///app/app/test/data/sample.wav'
        self.model.load()
        result = self.model.add({"url": url, "project_media_id": 1})
        self.assertIsInstance(result, dict)
        self.assertEqual(sorted(result.keys()), ['requested', 'result', 'success'])
        self.assertEqual(sorted(result['requested'].keys()), ['project_media_id', 'url'])
        self.assertEqual(sorted(result['result'].keys()), ['url'])

    def test_search(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        self.model.load()
        hash_key = "blah"
        with patch('app.main.lib.shared_models.audio_model.AudioModel.search_by_context', ) as mock_search_by_context:
            mock_search_by_context.return_value = [{"folder": "blah", "filepath": "12342", "context": [{'blah': 1, 'project_media_id': 12342}]}, {"folder": "blah", "filepath": "12343", "context": [{'blah': 1, 'project_media_id': 12343}]}]
            self.model.add({"doc_id": "Y2hlY2stcHJvamVjdF9tZWRpYS01NTQ1NzEtdmlkZW8", "url": url, "project_media_id": 1, "context": {"blah": 1, 'project_media_id': 12343}})
            result = self.model.search({"url": url, "project_media_id": 1, "context": {"blah": 1, 'project_media_id': 12343}})
        self.assertIsInstance(result, dict)
        self.assertEqual(sorted(result["result"][0].keys()), ['chromaprint_fingerprint', 'context', 'doc_id', 'id', 'score', 'url'])
        self.assertEqual(result["result"][0]['doc_id'], 'blah')
        self.assertEqual(result["result"][0]['url'], 'http://blah.com')
        self.assertEqual(result["result"][0]['context'], [{'blah': 1}])

    def test_respond_delete(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        self.model.load()
        self.model.add({"url": url, "id": 1})
        result = self.model.respond({"url": url, "project_media_id": 1, "command": "delete"})
        self.assertIsInstance(result, dict)
        self.assertEqual(sorted(result.keys()), ['requested', 'result'])
        self.assertEqual(sorted(result['requested'].keys()), ['command', 'project_media_id', 'url'])
        self.assertEqual(sorted(result['result'].keys()), ['deleted', 'url'])

    def test_respond_add(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        self.model.load()
        result = self.model.respond({"url": url, "project_media_id": 1, "command": "add"})
        self.assertIsInstance(result, dict)
        self.assertEqual(sorted(result.keys()), ['requested', 'result', 'success'])
        self.assertEqual(sorted(result['requested'].keys()), ['command', 'project_media_id', 'url'])
        self.assertEqual(sorted(result['result'].keys()), ['url'])

    def test_respond_search(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        self.model.load()
        hash_key = "blah"
        with patch('app.main.lib.shared_models.audio_model.AudioModel.search_by_context', ) as mock_search_by_context:
            mock_search_by_context.return_value = [{"folder": "blah", "filepath": "12342", "context": [{'blah': 1, 'project_media_id': 12342}]}, {"folder": "blah", "filepath": "12343", "context": [{'blah': 1, 'project_media_id': 12343}]}]
            self.model.respond({"doc_id": "Y2hlY2stcHJvamVjdF9tZWRpYS01NTQ1NzEtdmlkZW8", "url": url, "project_media_id": 1, "command": "add", "context": {"blah": 1, 'project_media_id': 12343}})
            result = self.model.respond({"url": url, "project_media_id": 1, "command": "search", "context": {"blah": 1, 'project_media_id': 12343}})
        self.assertIsInstance(result, dict)
        self.assertEqual(sorted(result["result"][0].keys()), ['chromaprint_fingerprint', 'context', 'doc_id', 'id', 'score', 'url'])
        self.assertEqual(result["result"][0]['doc_id'], 'blah')
        self.assertEqual(result["result"][0]['url'], 'http://blah.com')
        self.assertEqual(result["result"][0]['context'], [{'blah': 1}])


    def test_audio_model_search_by_context(self):
        url = 'file:///app/app/test/data/eddy_wally_wow.mp3'
        second_print = [-1327875138,-1329980737,-1279583555,-1292363892,-1300745332,-1300750260,-1829818324,-1834151896,-1834008534,-1867652086,-794434550,-790106102,-798113782,-735230886,-735099670,-730956118,-721474904,-721667336,1417428680,1413234376,1413342796,2084484620,1962839597,882809639,899460134,1989977159,1920377027,1915125891,1915125891,572948627,572965027,573043617,582280929,1655987941,1655991876,1660184332,1669095692,-516013768,-532806888,-532802024,1626740344,1620512504,1620319898,1620322954,1619274394,1615079850,-486183766,-502866758,-480865142,-503938998,-525565939,-525561588,-521363172,-533944536,-517423316,-500516052,-496313876,-487928659,-492059474,-492027730,-487825218,-482483974,-532754118,-533839078,-533908726,1613508362,1613507099,-529634773,-525415893,-525366758,-441677110,-408119346,-403918578,1731112975,1714335806,-432087001,-432316379,-432529312,-499642272,-495320860,-486930460,-492171724,1621760516,1621768719,1626028558,1617439246,1613250414,1617432682,1617428714,1710960778,1640576138,1640506526,1908934079,831000509,898185661,394996109,378087823,378349959,378432935,383692710,316573506,1400340738,1348968707,1348969728,1344775184,1344640048,1362079792,1915724064,1916662752,-221724000,-225918299,-225918290,-494237714,-505434838,-532830182,-265377782,-265373686,-265361398,-529532902,-533982166,-532934614,-535297942,-514260566,-477429078,-477477208,-477111640,-509805928,-522933620,-267081084,-267082108,1880417217,1898975811,1915892275,1914839841,1919295776,1923481632,-223461376,1924058116,1907263748,1622129156,1626188300,1617271321,1613018922,1630318890,-483622870,-483606486,-532725462,-534899926,-534892997,-530699719,-526640600,-476292248,-1499984936,-1497885752,-1225248120,-42257783,-61181207,-1126534167,-1130733080,-1128602408,-1111889847,-1096173479,-1096115717,-1091912741,-1100437862,-1104633206,-1389833590,-1406614854,-1540669014,-1536532310,-1536547606,-1535432449,-1267058465,-184670003,-184670003,-721547835,1425998789,1421808279,1354695574,1354044310,1085552050,1089764786,1130667170,1378335874,1378268355,1378264129,1378189313,1915196721,1915207457,1646767653,1630514981,1613665589,1613398037,-534200281,-530034459,-529006363,-528797468,-262528539,-260432031,-251982287,-256963055,-189841917,-189846014,-726702590,-710109630,-693330238,-567505278,-701657470,-164984190,-164983934,-219571039,-223810400,1655202980,1650995340,1646862468,1646928260,1664754100,1614426532,1627063268,1622692404,1621684748,1621683724,1625877004,1617472009,1617541689,-471156437,-487942102,-487945158,-495282933,-434461749,-418798917,-452406615,-1526152535,-1526185288,-1492559960,-1504805464,-1365251928,-1364207559,-1364206567,-1498619637,-1476632310,-1485020918,-1518440342,-1535246102,-1535507286,-465958726,-465958758,-463586934,-455201845,-241281525,-207633911,-201551351,-231431671,-165370563,-161176531,-140213203,-189808513,-185712425,-730984266,-599908170,-595647306,-589481818,-590006106,-594200138,-537445754,1526012550,1517231750,1516974791,451486276,451420452,451682340,443293732,455925796,960012316,960016404,962109821,969449981,1032359101,1036556477,1011464381,873175221,873121941,807041207,823797941,857605287,847184039,846987413,847057493,854467108,850149940,849666564,816112140,811972104,808360456,808376840,808376841,811911979,820300010,849661162,850772185,850833608,844538056,839295208,839164136,839172328,843467912,1371937160,1350990488,1350986472,1356298984,1894800920,1885401609,1893773834,1956815370,1956815658,1952491306,1681168682,-468416470,-468219778,-468285234,-465660722,-449933234,-433335857,-433438227,-433441876,-429252188,-419946332,-424140628,-424140632,-290848520,-290840616,-273741239,-307996149,-303801830,-59975142,-64162294,-64429558,-47652342,-1351953814,-1409644950,-1426552085,-1426527525,-1160188213,-1166350645,-1099238709,-1082506551,-1216724053,-1226227285,-1226283861,-424121170,-222795602,-218597186,1916394686,1916761294,1916687438,1915617359,841359431,841352053,845423332,867447532,1891386092,1890534088,1890468552,1353675080,1353569288,1353708585,1352989738,-794531798,-253466326,-244975062,-181941702,-261648886,-251817462,1643950601,1643676168,1635287592,1631236648,1614455336,-532962008,-533146551,-535247669,1612235995,1611291835,1661607337,1649023657,1653226137,1653292684,1653159567,-490130802,-488967746,-472129362,-504782546,-504855777,-479686131,-500653556,-500653540,-500583896,-483724760,-529859288,-454391767,-453343109,-460683110,-460801894,-523721590,-532111158,-536284982,-469057286,-468041494,-415339287,-428987927,-1502709031,-1494332789,-1498723701,-1364599093,-1343687989,-1342639541,-1353125253,-1369709975,-1361550740,-1359468820,-1359401067,-1368782409,-1385558874,-332725082,-467073866,-467066722,-462872418,-454303586,1705946207,1739435021,1739368463,1726261519,2003090703,1898364223,1898896503,1898858999,1903040951,1903102901,1928268711,1928007335,1659524055,1651405057,1651359745,1651298352,1634525236,1617749300,1617657364,1617581572,1617822476,1617690940,1627144492,-526597656,-460403224,-460420375,-460539189,-460805558,-406275574,-435511782,-435514870,-434458086,-432430486,-416766742,-332864338,-462855010,-467136369,-449314676,-411434820,-486918996,-487711236,-491909556,-1297662388,-1314574754,-1331403042,-1331419458,-1867223378,-1865128218,-1873492250,-1877031966,-1870728894,-1334910973,-1251221504,-1217684480,-1238464208,-1238459904,-1238435264,-1238435136,-164962624,-160939292,-152554843,-152554843,-160816505,-227006553,-495432541,-512178014,-520181566,1626249218,1626258434,1617867778,1613144067,1613078545,1630315808,1647097120,1647887648,1645855012,1649098980,-498515796,-498577224,-431468104,-422871368,-439452935,-326206901,-325133814,-325190902,-325261286,-321363942,-331849717,-315027367,-282459672,-286653720,-290770323,-408411265,-443014838,-455596982,-523752214,-1312159574,-242333254,-242332790,-242693238,-203896438,-210193270,-247689078,-514031478,-511737638,-479293398,-479289297,-516956108,-516988924,-517332716,-265670364,-265681107,-265745553,-261551363,-202429699,-223465956,-760344052,-760409592,-760458744,-1834163640,-1834160391,-1048794390,-734094678,-734082390,-734115174,-734264694,-735833654,-731615144,-706453396,-676962068,-706322220,-706315068,-705299579,-671827289,-692802906,-151602258,-159990322,-164133426,-148527355,-181947884,-265903563,1613079061,1613025813,1613586999,1630500135,1664043055,-488028113,-475281153,-475346737,1656417487,1660592335,1658552523,1658437867,1657324393,1658377001,1650057769,1648026169,1646978313,1630137353,1613294601,1618988073,1625211945,1624916248,1616462088,1612198664,1631069704,1648045608,1652181736,-492877144,-493004101,-490964086,-507711350,-524758902,-1325797206,-1336254294,-1340464982,-1336270418,-254070018,-256171403,-240426444,-509057476,-504824292,-513218036,-517428468,-517297400,-482432744,-482505448,-484668408,-484651960,-516373031,-1591060821,-1607847250,-1602608466,-1535565138,-1260907890,-1265040690,-1265101603,-1262999508,-1767364564,-1767299044,-1767233528,-2039858168,-2039807928,-2039676584,-2035334167,-2018585878,-1800428886,-1796426054,-1871934886,-802317798,-802317602,-802243698,-802247794,-215374450,-232197698,-232210258,-232070994,-499457625,-495263065,-487918861,-1578437118,-1595281914,-1595349498,-1599547858,-1599540690,-1528278738,-1536667607,-1536663496,-1528171208,-1528115432,-1376073016,-1352992120,-1374819704,-1370702872,-1361794837,-1365994374,-1376464418,-1405688882,-1405689122,-1405717850,-1540488282,-1540422222,-1536358255,-1527965520,-1246947088,-1245889520,-1229118464,-1296161532,-222420212,-218214899,-218150370,-218314450,-243476434,-533149586,1614401790,1614606470,1612505222,1610924198,1611056038,1665553062,1648784066,1657152198,1652957710,1653940764,-225172952,-222556632,-254014936,-1336116648,-1340544520,-1327515400,-1262581624,-1262713717,-1129545526,-1112763910,-1074814230,-1104502038,-1104481558,-1104542994,-1104538642,-1372704282,-1351740058,-306377673,-325310193,-56874737,2123901709,1591421452,1448753692,1444545884,1444622556,1377304780,307773624,318349464,314227849,837458057,808356045,807897213,807902269,807776557,808755501,1882497837,1614710292,1613680132,1613430324,-516948444,-479404188,-475214236,-508768651,-458302778,-458298682,-319821114,-1402144538,-1402143642,-1402416026,-1402448786,-1402309522,-1402330779,-1511381404,-420788484,-420981060,-420976964,-429363304,-432509047,-432378742,-428189558,-487061318,-503838534,-252048246,-1326830453,-1326816055,-1326811784,-1330915800,-1263944152,-1263948260,-1263948275,-1247234545,-1251438034,-1255353818,-1590902490,-1607643034,-1607568130,-1607582610,-1595011730,-520222210,-503502454,-486790774,1650141322,1650133131,1918372009,1918373032,1925920168,1926960060,1929056861,1928016397,854155791,317219591,296677127,279879431,284088068,1349174020,1361658396,1361637928,1344840488,-253188824,-256272088,-256145144,-256075000,-256075256,-256599253,-503999190,-478822358,-499859414,-432246742,-465772246,-465640918,-463547846,-455161334,-304559606,-277288374,-281478450,-366425442,-1423289674,-1452650058,-1465225050,-1196805978,-1196805961,-1196810043,-1191564095,-1736823359,-1739051679,-1730663065,-1734859545,-1734860601,-1734709179,-1650801652,-1629830100,-1629760212,-1636258536,-1636257976,-1636258232,-1099330856,-1099329813,-1099389270,-1100438870,-1104620614,-1104625526,-30752630,-30744421,-47567719,-64345895,-60151605,-51770934,-190248598,-190050518,-190303942,-172416758,-172400370,-174464706,-174481362,-442978259,-438783892,-445075348,-449216264,-415526408,-417688968,-485846488,-519323096,-519388632,-519313880,-485986776,-480482520,-1562576856,-1564686295,-1547778981,-471187253,-528756533,-530919222,-523320342,-523348374,-523348374,-1588822455,-1559429559,-1555267976,-1570998680,-1571024312,-503573944,-453176632,-454151511,-458345558,-458280534,-454282102,-454280006,-177992534,-169354070,-190382902,-190530550,-190532342,-56319478,-51928550,-60382678,-64511190,-1121614486,-1087992598,-1367955222,-1359566597,-1363755831,-1094930360,-1099132856,-1103323064,-1103175320,-1103223832,-1103223828,-1099036756,-1075115099,-1079440458,-5698682,-559203962,-541251198,1475620274,1467250162,1463152706,1429315586,389128194,909353987,909288449,572689408,572687360,572686336,1663533088,1613201440,1613545508,1613512748,1613501736,1617763816,1626803177,1622482603,1622417066,1620850362,1692149386,1683304074,1691758234,-459928918,-457438790,-190314038,-139969462,-672455414,-731225330,-722803930,-727064286,-727142110,-189226974,-189161423,-169167856,-152396736,-227898176,-232092544,-232092544,-232078208,-232110159,-147974493,-198367581]
        self.model.load()
        results = self.model.search_by_hash_value(second_print, 0.7, {"blah": 1})
        self.assertIsInstance(results[0], dict)
        self.assertEqual(sorted(results[0].keys()), ['chromaprint_fingerprint', 'context', 'doc_id', 'id', 'score', 'url'])
        self.assertEqual(results[0]['doc_id'], 'blah')
        self.assertEqual(results[0]['url'], "http://blah.com")
        self.assertEqual(results[0]['score'], 1.0)
        self.assertEqual(results[0]['context'], [{"blah": 1}])

if __name__ == '__main__':
  unittest.main()